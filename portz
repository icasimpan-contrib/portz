#!/bin/bash

##
## portz - minimal port system by zbigg 
##          (custom software bundling system)
##
## usage:
##   portz [options] install PACKAGE
##   portz [options] easy_install name=foo PACKAGE_URL
##   portz [options] get PACKAGE
##   portz [options] packback
##
## options
##   --prefix PATH      -- change installation prefix, default ($prefix, /usr/local)
##   --exec-prefix PATH -- change installation prefix, default ($exec_prefix, $prefix)
##   --debug|-d  -- debug mode, be more verbose
##   --quiet|-q  -- quiet mode, show only warnings and errors
##

eval `bashfoo --eval-out`

bashfoo_require auto_usage

#
# find portz_libdir, our library
#
portz_bindir=$(dirname $BASH_SOURCE)
if   [ -x "$portz_bindir/portz_install" ] ; then
    portz_libdir="$portz_bindir"
elif [ -x "$portz_bindir/../lib/portz/portz_install" ] ; then
    portz_libdir="$portz_bindir/../lib/portz/portz_install"
else
    log_error "unable to find 'portz_libdir', tried $portz_bindir and $portz_bindir/../lib/portz" 
fi

while [ -n "$1" ] ; do
    maybe_show_auto_help
    if log_process_options "$1"; then
        shift
        continue
    fi
    
    case "$1" in
        --prefix)
            [ -z "$2" ] && fail_on_bad_usage "$1, argument required"
            prefix=$2
            export prefix
            shift ; shift
            ;;
        --exec-prefix|--exec_prefix)
            [ -z "$2" ] && fail_on_bad_usage "$1, argument required"
            exec_prefix=$2
            export exec_prefix
            shift ; shift
            ;;
        install|invoke|get|easy_install|query|packback|uninstall)
            action=$1
            shift
            break
            ;;
        *)
            fail_on_bad_usage "'$1' -- invalid action or option"
            ;;
    esac
done

[ -z "$action" ] && fail_on_bad_usage "action required"

log_debug "action=$action"
log_debug "portz_libdir=$portz_libdir"
log_debug "prefix=$prefix"
log_debug "exec_prefix=$exec_prefix"

exec "${portz_libdir}/portz_${action}" "$@"

